generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  password String
  type     Role     @default(USER)
  comments Comment?
  orders   Order[]
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  price       Float
  discount    Float       @default(0)
  amount      Int         @default(0)
  variations  String[]
  colors      String[]
  images      String[]
  createdAt   DateTime    @default(now())
  brandId     String?
  comments    Comment[]
  orderItems  OrderItem[]
  brand       Brand?      @relation(fields: [brandId], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  totalPrice Float
  status    Status      @default(PENDING)
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItem  OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  productId Int
  amount    Int
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Comment {
  userId    String   @id
  productId Int
  createdAt DateTime @default(now())
  content   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id       String    @id
  Products Product[]
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  PROCESSING
  DELIVERING
  DELIVERED
  CANCELLED
}
